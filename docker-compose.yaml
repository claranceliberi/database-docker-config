version: '3.3'
services:
    mysql:
        image: mysql
        container_name: mysql
        # env_file: # using env file instead of env variables
        #     - database.env 
        environment:
            MYSQL_DATABASE: 'learndb'
            # So you don't have to use root, but you can if you like
            MYSQL_USER: 'liberi'
            # You can use whatever password you like
            MYSQL_PASSWORD: 'liberi'
            # Password for root access
            MYSQL_ROOT_PASSWORD: 'liberi'
            MYSQL_ROOT_HOST: '%'
        ports:
            # <Port exposed> : < MySQL Port running inside container>
            - '3306:3306'
        expose:
            # Opens port 3306 on the container
            - '3306'
        # Where our data will be persisted
        volumes:
            - my-db-data:/var/lib/mysql
        restart: always

    postgresql:
        image: postgres # use latest official postgres version
        container_name: postgress
        ports:
            - "5432:5432"
        expose:
            # Opens port 3306 on the container
            - '5432'
        # env_file: # using env file instead of env variables
        #     - database.env 
        environment:
            - POSTGRES_USER=liberi
            - POSTGRES_PASSWORD=liberi
            - POSTGRES_DB=learndb
        volumes:
            - pg-db-data:/var/lib/postgresql/data/
        restart: always
    mongodb:
        image: mongo:latest
        environment:
        MONGO_INITDB_ROOT_USERNAME: root
        MONGO_INITDB_ROOT_PASSWORD: rootpassword
        ports:
        - 27017:27017
        volumes:
        - mongodb_data_container:/data/db
# Names our volume
volumes:
    my-db-data:
    mongodb_data_container:
    pg-db-data: # named volumes can be managed easier using docker-compose